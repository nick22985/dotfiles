---
- hosts: archtest
  become: yes
  gather_facts: no

  vars:
    efi_size: 1  # EFI partition size in GB
    swap_size: 2  # Swap partition size in GB
    root_size: 20  # Root partition size in GB (200)
    locale: "en_AU.UTF-8"  # Set your desired locale
    timezone: "Australia/Brisbane"  # Set your desired timezone
    hostname: "archtest"  # Set your desired hostname
    #TODO: move to ansible vault or something
    # demo creds
    username: "nick"  # Replace with your desired username
    password: "your_password_here"  # Replace with your desired password
    root_password: "root_password_here"  # Replace with your desired root password
    gpu_type: "amd"  # Set to "amd" or "nvidia" based on your system
    cpu_type: "intel"
    chroot_path: /mnt  # Path where your system is mounted
    
  vars_prompt:
    - name: selected_disk
      prompt: "Please enter the disk to use (e.g., /dev/sda)"
      private: no

  tasks:
    - name: Convert EFI partition size to MiB
      set_fact:
        efi_size_mib: "{{ efi_size | int * 1024 }}"

    - name: Convert swap partition size to MiB
      set_fact:
        swap_size_mib: "{{ swap_size | int * 1024 }}"

    - name: Convert root partition size to MiB
      set_fact:
        root_size_mib: "{{ root_size | int * 1024 }}"

    - name: Set EFI start
      set_fact:
        efi_start: 1024

    - name: Set EFI end
      set_fact:
        efi_end: "{{ efi_start | int + efi_size_mib | int - 1 }}"

    - name: Set swap start
      set_fact:
        swap_start: "{{ efi_end | int + 1 }}"

    - name: Set swap end
      set_fact:
        swap_end: "{{ swap_start | int + swap_size_mib | int - 1 }}"

    - name: Set root start
      set_fact:
        root_start: "{{ swap_end | int + 1 }}"

    - name: Set root end
      set_fact:
        root_end: "{{ root_start | int + root_size_mib | int - 1 }}"


    - name: Set home start
      set_fact:
        home_start: "{{ root_end | int + 1 }}"

    - name: Convert EFI end to string with MiB
      set_fact:
        efi_end_str: "{{ efi_end }}MiB"

    - name: Convert swap start to string with MiB
      set_fact:
        swap_start_str: "{{ swap_start }}MiB"

    - name: Convert swap end to string with MiB
      set_fact:
        swap_end_str: "{{ swap_end }}MiB"

    - name: Convert root start to string with MiB
      set_fact:
        root_start_str: "{{ root_start }}MiB"

    - name: Convert root end to string with MiB
      set_fact:
        root_end_str: "{{ root_end }}MiB"

    - name: Convert home start to string with MiB
      set_fact:
        home_start_str: "{{ home_start }}MiB"

    - name: Print partition variables for debugging
      debug:
        msg: 
          - "EFI Start: {{ efi_start }} MiB"
          - "EFI End: {{ efi_end_str }}"
          - "Swap Start: {{ swap_start_str }}"
          - "Swap End: {{ swap_end_str }}"
          - "Root Start: {{ root_start_str }}"
          - "Root End: {{ root_end_str }}"
          - "Home Start: {{ home_start_str }}"

    - name: Wipe the disk
      command: "sgdisk --zap-all {{ selected_disk }}"
      ignore_errors: yes


    - name: Partition the disk using parted
      parted:
        device: "{{ selected_disk }}"
        label: gpt
        align: optimal
      changed_when: false

    - name: Create EFI partition
      parted:
        device: "{{ selected_disk }}"
        number: 1
        name: "EFI"
        part_start: "{{ efi_start }}MiB"
        part_end: "{{ efi_end_str }}"
        fs_type: fat32
        label: gpt
        part_type: primary
        flags: [boot, esp]
        state: present

    - name: Create swap partition
      parted:
        device: "{{ selected_disk }}"
        number: 2
        part_start: "{{ swap_start_str }}"
        part_end: "{{ swap_end_str }}"
        fs_type: linux-swap
        part_type: primary
        label: gpt
        state: present

    - name: Create root partition
      parted:
        device: "{{ selected_disk }}"
        number: 3
        part_start: "{{ swap_end_str }}"
        part_end: "{{ root_end_str }}"
        fs_type: ext4
        part_type: primary
        label: gpt
        state: present

    - name: Create home partition
      parted:
        device: "{{ selected_disk }}"
        number: 4
        part_start: "{{ root_end_str }}"
        part_end: 100%
        fs_type: ext4
        part_type: primary
        label: gpt
        state: present

    - name: Format EFI partition
      command: mkfs.fat -F32 "{{ selected_disk }}1"

    - name: Format swap partition
      command: mkswap "{{ selected_disk }}2"

    - name: Enable swap partition
      command: swapon "{{ selected_disk }}2"

    - name: Format root partition
      command: mkfs.ext4 "{{ selected_disk }}3"

    - name: Format home partition
      command: mkfs.ext4 "{{ selected_disk }}4"

    - name: Mount root partition
      mount:
        path: /mnt
        src: "{{ selected_disk }}3"
        fstype: ext4
        state: mounted

    - name: Create and mount boot partition
      file:
        path: /mnt/boot
        state: directory

    - name: Mount boot partition
      mount:
        path: /mnt/boot
        src: "{{ selected_disk }}1"
        fstype: vfat
        state: mounted

    - name: Create and mount home partition
      file:
        path: /mnt/home
        state: directory

    - name: Mount home partition
      mount:
        path: /mnt/home
        src: "{{ selected_disk }}4"
        fstype: ext4
        state: mounted

    - name: Update package database
      pacman:
        update_cache: yes

    - name: Ensure pacman-contrib is installed
      pacman:
        name: pacman-contrib
        state: present

    - name: Backup the current mirrorlist
      copy:
        src: /etc/pacman.d/mirrorlist
        dest: /etc/pacman.d/mirrorlist.backup
        backup: yes
        remote_src: yes
      become: true
      become_user: root
    - name: Rank mirrors and update the mirrorlist
      shell: rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist
      args:
        _uses_shell: true

    - name: Install base system packages
      command: pacstrap /mnt base base-devel linux linux-firmware 
      become: true
      become_user: root

    - name: Generate and append fstab entries
      shell: genfstab -U -p /mnt >> /mnt/etc/fstab
      args:
        _uses_shell: true
      become: true
      become_user: root

    # TODO: should i update pacman cache here
    - name: Install neovim and bash-completion in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "pacman -S --noconfirm neovim bash-completion"
      become: true
      become_user: root

    # TODO: user vars
    - name: Enable en_AU.UTF-8 locale in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "sed -i 's/^#en_AU.UTF-8 UTF-8/en_AU.UTF-8 UTF-8/' /etc/locale.gen"
      become: true
      become_user: root

    - name: Generate locales in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "locale-gen"
      become: true
      become_user: root

    - name: Set system locale in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "echo LANG=en_AU.UTF-8 > /etc/locale.conf"
      become: true
      become_user: root

    - name: Export LANG environment variable in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "export LANG=en_AU.UTF-8"
      become: true
      become_user: root

    - name: Set timezone to Australia/Brisbane in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "ln -sf /usr/share/zoneinfo/Australia/Brisbane /etc/localtime"
      become: true
      become_user: root

    - name: Set hardware clock to UTC in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "hwclock --systohc --utc"
      become: true
      become_user: root

    - name: Set hostname
      command: >
        arch-chroot /mnt /bin/bash -c "echo '{{ hostname }}' > /etc/hostname"

    - name: Uncomment [multilib] in pacman.conf inside chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "sed -i 's/^#\\[multilib\\]/\\[multilib\\]/' /etc/pacman.conf"
      become: true
      become_user: root

    - name: Uncomment Include line for multilib in pacman.conf inside chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "sed -i '/^\[multilib\]/,/^$/ s/^#Include/Include/' /etc/pacman.conf"
      become: true
      become_user: root    

    # for ssd
    - name: Enable fstrim.timer in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "systemctl enable fstrim.timer"
      become: true
      become_user: root

    - name: Update package database in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm"
      become: true
      become_user: root

    - name: Set the root password in chroot
      shell: |
        echo -e "{{ root_password }}\n{{ root_password }}" | arch-chroot /mnt /bin/bash -c "passwd"
      become: true
      become_user: root

    - name: Create the user in chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "useradd -m -g users -G wheel,storage,power -s /bin/bash {{ username }}"
      become: true
      become_user: root

    - name: Set the password for the user in chroot
      shell: |
        echo -e "{{ password }}\n{{ password }}" | arch-chroot /mnt /bin/bash -c "passwd {{ username }}"
      become: true
      become_user: root 

    - name: Add Defaults rootpw to sudoers file inside chroot
      shell: |
        arch-chroot /mnt /bin/bash -c "echo 'Defaults rootpw' >> /etc/sudoers"
      become: true
      become_user: root 

    - name: Ensure efivarfs is mounted
      shell: |
        arch-chroot /mnt /bin/bash -c "mount | grep -q 'efivarfs on /sys/firmware/efi/efivars' || mount -t efivarfs efivarfs /sys/firmware/efi/efivars"
      become: true
      become_user: root

    - name: Install systemd-boot bootloader
      shell: |
        arch-chroot /mnt /bin/bash -c "bootctl install"
      become: true
      become_user: root

    - name: Install microcode package
      package:
        name: "{{ 'amd-ucode' if cpu_type == 'amd' else 'intel-ucode' }}"
        state: present


    - name: Get PARTUUID for the root partition
      command: blkid -s PARTUUID -o value "{{ selected_disk }}3"
      register: root_partuuid

    - name: Write bootloader title
      command: >
        arch-chroot /mnt /bin/bash -c "echo 'title Nick Arch Linux' > /boot/loader/entries/nick-arch.conf"

    - name: Add linux line to bootloader entry
      command: >
        arch-chroot /mnt /bin/bash -c "echo 'linux /vmlinuz-linux' >> /boot/loader/entries/nick-arch.conf"

    - name: Add initrd microcode line to bootloader entry
      command: >
        arch-chroot /mnt /bin/bash -c "echo 'initrd /{{ 'intel-ucode.img' if cpu_type == 'intel' else 'amd-ucode.img' }}' >> /boot/loader/entries/nick-arch.conf"

    - name: Add initrd linux image line to bootloader entry
      command: >
        arch-chroot /mnt /bin/bash -c "echo 'initrd /initramfs-linux.img' >> /boot/loader/entries/nick-arch.conf"

    - name: Add kernel options to bootloader entry
      command: >
        arch-chroot /mnt /bin/bash -c "echo 'options root=PARTUUID={{ root_partuuid.stdout }} rw' >> /boot/loader/entries/nick-arch.conf"

    - name: Install dhcpcd in chroot
      command: >
        arch-chroot /mnt pacman -S --noconfirm dhcpcd
      become: true
      become_user: root

    - name: Enable dhcpcd service in chroot
      command: >
        arch-chroot /mnt systemctl enable dhcpcd
      become: true
      become_user: root

    - name: Install networkmanger in chroot
      command: >
        arch-chroot /mnt pacman -S --noconfirm networkmanager
      become: true
      become_user: root

    - name: Enable networkmanager service in chroot
      command: >
        arch-chroot /mnt systemctl enable NetworkManager
      become: true
      become_user: root

    - name: Install base-devel and git in chroot
      command: >
        arch-chroot /mnt pacman -S --noconfirm base-devel git
      become: true
      become_user: root

    # AMD - check if this is correct
    - name: Install AMD GPU proprietary packages in chroot
      command: >
        arch-chroot /mnt bash -c "pacman -S mesa lib32-mesa xf86-video-amdgpu "
      when: gpu_type == "amd"
      become: true
      become_user: root

      # nvidia shit
    - name: Install NVIDIA drivers and related packages
      when: gpu_type == "nvidia"
      command: >
        arch-chroot /mnt bash -c "pacman -S --noconfirm nvidia-dkms nvidia-utils opencl-nvidia libglvnd lib32-libglvnd lib32-nvidia-utils lib32-opencl-nvidia nvidia-settings"

    - name: Enable NVIDIA modules in the initramfs
      when: gpu_type == "nvidia"
      command: >
        arch-chroot /mnt bash -c "sed -i 's/^MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf && mkinitcpio -P"

    - name: Add nvidia-drm.modeset=1 to existing kernel options in bootloader entry
      command: >
        arch-chroot /mnt /bin/bash -c "sed -i '/^options / s/$/ nvidia-drm.modeset=1/' /boot/loader/entries/nick-arch.conf"
      when: gpu_type == "nvidia"

    - name: Ensure hooks directory exists inside chroot
      command: >
        arch-chroot /mnt /bin/bash -c "mkdir -p /etc/pacman.d/hooks"
      when: gpu_type == "nvidia"

    - name: Create NVIDIA hook inside chroot
      command: >
        arch-chroot /mnt /bin/bash -c "cat > /etc/pacman.d/hooks/nvidia.hook <<EOF
        [Trigger]
        Operation=Install
        Operation=Upgrade
        Operation=Remove
        Type=Package
        Target=nvidia
        Target=linux

        [Action]
        Description=Update NVIDIA module in initramfs
        Depends=mkinitcpio
        When=PostTransaction
        Exec=/usr/bin/mkinitcpio -P
        EOF"
      when: gpu_type == "nvidia"

    - name: Set environment variables in Hyprland config for NVIDIA
      lineinfile:
        path: /home/{{ username }}/.config/hypr/hyprland.conf
        create: yes
        line: "{{ item }}"
      loop:
        - "env = LIBVA_DRIVER_NAME,nvidia"
        - "env = XDG_SESSION_TYPE,wayland"
        - "env = GBM_BACKEND,nvidia-drm"
        - "env = __GLX_VENDOR_LIBRARY_NAME,nvidia"
        - "cursor { no_hardware_cursors = true }"
      when: gpu_type == "nvidia"
      become_user: "{{ username }}"

    - name: Ensure curl is installed in arch-chroot
      command: arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm curl"
      become: true
      become_user: root

    - name: Ensure .ssh directory exists in arch-chroot
      command: arch-chroot /mnt /bin/bash -c "mkdir -p /root/.ssh"
      become: true
      become_user: root

    - name: Download SSH keys from GitHub and add them to authorized_keys in arch-chroot
      command: >
        arch-chroot /mnt /bin/bash -c "
        AUTHORIZED_KEYS_FILE=/root/.ssh/authorized_keys;
        KEY_URL='https://github.com/nick22985.keys';
        curl -sSL $KEY_URL | while read -r key; do
            if grep -q \"$key\" \"$AUTHORIZED_KEYS_FILE\"; then
                echo 'Key already exists in $AUTHORIZED_KEYS_FILE';
            else
                echo \"$key\" | tee -a \"$AUTHORIZED_KEYS_FILE\";
                echo 'Key added to $AUTHORIZED_KEYS_FILE';
            fi;
        done"
      become: true
      become_user: root

    - name: Install OpenSSH in arch-chroot
      command: arch-chroot /mnt /bin/bash -c "pacman -Sy --noconfirm openssh"
      become: true
      become_user: root

    - name: Enable and start sshd service in arch-chroot
      command: arch-chroot /mnt /bin/bash -c "systemctl enable sshd && systemctl start sshd"
      become: true
      become_user: root

    - name: Configure SSH to disable password authentication in arch-chroot
      command: >
        arch-chroot /mnt /bin/bash -c "sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config"
      become: true
      become_user: root

    - name: Ensure SSH key authentication is enabled in arch-chroot
      command: >
        arch-chroot /mnt /bin/bash -c "sed -i 's/^#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config"
      become: true
      become_user: root

    - name: Ensure root login is allowed via SSH in arch-chroot (optional)
      command: >
        arch-chroot /mnt /bin/bash -c "sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config"
      when: allow_root_ssh | default(false)
      become: true
      become_user: root

    - name: Restart sshd service in arch-chroot
      command: arch-chroot /mnt /bin/bash -c "systemctl restart sshd"
      become: true
      become_user: root

    - name: Reboot the machine
      reboot:
        msg: "Rebooting the system to apply changes."
        pre_reboot_delay: 10
        reboot_timeout: 300
        test_command: whoami
      become: true
      become_user: root

    - name: Check for failed systemd services
      command: systemctl --failed
      register: failed_services
      ignore_errors: yes

    - name: Display failed systemd services if any
      debug:
        var: failed_services.stdout
      when: failed_services.stdout != ""

    - name: Install Wayland, KDE Plasma, and dependencies
      pacman:
        name:
          - plasma
          - kde-applications
          - wayland
        state: present
      become_user: "{{ username }}"

    - name: Install Hyperland
      pacman:
        name: hyperland
        state: present
      become_user: "{{ username }}"

    - name: Install SDDM
      pacman:
        name: sddm
        state: present
      become_user: "{{ username }}"

    - name: Enable SDDM to start on boot
      systemd:
        name: sddm
        enabled: yes
      become_user: "{{ username }}"

    - name: Set KDE Plasma as the default session in SDDM
      lineinfile:
        path: /mnt/etc/sddm.conf
        line: "Session=plasmawayland.desktop"
        create: yes
        insertafter: '[Autologin]'
      become_user: "{{ username }}"

    - name: Optionally configure SDDM for Hyperland as the default session
      lineinfile:
        path: /mnt/etc/sddm.conf
        line: "Session=hyperland.desktop"
        create: yes
        insertafter: '[Autologin]'
      when: use_hyperland_as_default | default(false)
      become_user: "{{ username }}"

    - name: Install additional dependencies for Hyprland
      pacman:
        name:
          - dunst
          - pipewire
          - wireplumber
          - xdg-desktop-portal
          - qt5-wayland
          - qt6-wayland
          - polkit-kde-agent
        state: present
      become_user: "{{ username }}"

    - name: Enable PipeWire and related services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        scope: user
      loop:
        - pipewire
        - pipewire-pulse
        - wireplumber
      become_user: "{{ username }}"

    - name: Enable XDG Desktop Portal services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        scope: user
      loop:
        - xdg-desktop-portal
        - xdg-desktop-portal-wlr
      become_user: "{{ username }}"

    - name: Configure Authentication Agent to start with Hyprland
      lineinfile:
        path: /home/{{ username }}/.config/hypr/hyprland.conf
        line: "exec-once=systemctl --user start plasma-polkit-agent"
        create: yes
      become_user: "{{ username }}"

    - name: Configure Notification Daemon (Dunst) to start with Hyprland
      lineinfile:
        path: /home/{{ username }}/.config/hypr/hyprland.conf
        line: "exec-once=dunst &"
        create: yes
      become_user: "{{ username }}"
