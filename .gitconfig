[user]
	name = nick22985
	email = nick22985@hotmail.com
	signingkey = EDEE4CC55CB599FF

[commit]
	gpgsign = true

[tag]
	gpgsign = true

[pull]
	rebase = false

[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out

    followTags = true

[apply]

	# Detect whitespace errors when applying a patch.
	whitespace = fix

[branch]
	sort = -committerdate

[alias]

    a   = commit --amend
    br  = branch
    c   = commit
    ca  = !git add -A && git commit                 # Commit all changes
    co  = checkout
    cp  = cherry-pick
    d   = diff
    dc  = diff --cached
    g   = log --graph --pretty=custom               # Show custom graph
    l   = log --pretty=custom                       # Show custom log
    lc  = shortlog --summary --numbered             # List contributors
    rlc = reset --hard HEAD~1                       # Remove last commit
    s   = status
    ulc = reset --soft HEAD~1                       # Undo last commit

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code

    chc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by author

    cha = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by author message

    chm = "!f() { \
        git log --pretty=custom --decorate --date=short --author=\"$1\"; \
    }; f"


    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"


[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow
    new = green
    old = red

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[core]

    abbrev = 12
    attributesfile = ~/.gitattributes
	autocrlf = input
    editor = code
    excludesfile = ~/.gitignore
	untrackedCache = true

[diff "bin"]

    # Use `hexdump` to diff binary files

    textconv = hexdump -v -C

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)


# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

[init]
	defaultBranch = master

[include]

    # Load local configs
    # https://git-scm.com/docs/git-config#_includes
    #
    # Note: The following needs to remain at the end of this file in
    #       order to allow any of the above configs to be overwritten
    #       by the local ones

    path = ~/.gitconfig.local