#!/usr/bin/env bash 

switch_to() {
    if [[ -z $TMUX ]]; then
        tmux attach-session -t $1
    else
        tmux switch-client -t $1
    fi
}

has_session() {
    tmux list-sessions | grep -q "^$1:"
}

hydrate() {
    local sessionizer_dir=".config/.nickInstall/install/configs/private/.tmux-sessionizer"
    local project_name=$1

    # Check project dir
    if [ -f $2/.tmux-sessionizer ]; then
        tmux send-keys -t $1 "source $2/.tmux-sessionizer $1 $2" c-M
    # check folder
    elif [ -d "$HOME/$sessionizer_dir" ] && [ -f "$HOME/$sessionizer_dir/${project_name}" ]; then
        tmux send-keys -t "$1" "source $HOME/$sessionizer_dir/${project_name} $1 $2" C-m
    # use default home dir
    elif [ -f $HOME/.tmux-sessionizer ]; then
        tmux send-keys -t $1 "source $HOME/.tmux-sessionizer $1 $2" c-M 
    fi
}

if [[ $# -eq 1 ]]; then
    selected=$1
else
    find_command=()
    declare -a default_paths=(
        "$HOME/projects"
        "$HOME"
        "$HOME/.config"
        "$HOME/.config/.nickInstall/install/configs/private"
        "$HOME/projects/work"
        "$HOME/projects/personal"
    )

    # Function to add paths to the find_command array
    add_to_find_command() {
        local path=$1
        local mindepth=${2:-1}
        local maxdepth=${3:-1}
        path="${path/\$HOME/$HOME}"
        local results=$(find "$path" -mindepth $mindepth -maxdepth $maxdepth -type d 2>/dev/null)
        if [ ! -z "$results" ]; then
            find_command+=("$results")
        fi
    }
    for path_info in "${default_paths[@]}"; do
        IFS=' ' read -r path mindepth maxdepth <<< "$path_info"
        add_to_find_command "$path" "$mindepth" "$maxdepth"
    done

    # Add paths from external file to find_command
    if [ -f "$HOME/.config/.nickInstall/install/configs/private/.find_paths.txt" ]; then
        while IFS=' ' read -r path mindepth maxdepth; do
            add_to_find_command "$path" "$mindepth" "$maxdepth"
        done < "$HOME/.config/.nickInstall/install/configs/private/.find_paths.txt"
    fi
    # Extract SSH hosts
    ssh_hosts=($(grep -E '^Host\s+' ~/.ssh/config | grep -v 'HostName' | awk '{print "ssh/"$2}'))

    selected=$(printf "%s\n" "${find_command[@]}" "${ssh_hosts[@]}" | fzf --tiebreak end,length,index)
fi

if [[ -z $selected ]]; then
    exit 0
fi

selected_name=$(basename "$selected" | tr . _)
ssh_host=()
if [[ $selected == ssh/* ]]; then
    selected_name="ssh-$selected_name"
    ssh_host=${selected#ssh/}
fi
tmux_running=$(pgrep tmux)

if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    if [[ $selected == ssh/* ]]; then
        tmux new-session -s $selected_name "ssh $ssh_host"
        tmux set-environment -t $selected_name TMUX_SSH_HOST $ssh_host
    else
        tmux new-session -s $selected_name -c $selected
    fi
    hydrate $selected_name $selected
    exit 0
fi

if ! has_session $selected_name; then
    if [[ $selected == ssh/* ]]; then
        tmux new-session -ds $selected_name "ssh $ssh_host"
        tmux set-environment -t $selected_name TMUX_SSH_HOST $ssh_host
    else
        tmux new-session -ds $selected_name -c $selected
    fi
    hydrate $selected_name $selected
fi

switch_to $selected_name
