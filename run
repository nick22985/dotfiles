#!/usr/bin/env bash

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

export DOTFILES_DIR="$script_dir"
export DEV_ENV="$script_dir"

source "$script_dir/lib/utils.sh"

keep_sudo_alive() {
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &
}

if [[ "${DRY_RUN:-0}" != "1" ]] && [[ "$*" != *"--dry"* ]]; then
    log "Requesting sudo privileges upfront..."
    if sudo -v; then
        log "‚úì Sudo privileges granted"
        keep_sudo_alive
    else
        log "‚ùå Failed to get sudo privileges"
        exit 1
    fi
fi

grep_pattern=""

while [[ $# -gt 0 ]]; do
    if [[ "$1" == "--dry" ]]; then
        DRY_RUN="1"
        export DRY_RUN
    else
        grep_pattern="$1"
    fi
    shift
done

log "RUN: grep: $grep_pattern -- dry: $DRY_RUN"

# Define execution order programmatically
execution_order=(
    "git"
    "fonts"
    "oh-my-zsh"
    "dotfiles"
    "packages"
    "shell"
    "hyprland-packages"
    "tmux"
    "hypr"
    "node"
    "ssh"
    "sync-repos"
    "flatpak"
    "snap"
    "grub-multiboot"
    "kde-plasma"
    "defaults"
)

# Load ignore list
ignore_file="$script_dir/.ignore"
ignored_scripts=()
if [[ -f "$ignore_file" ]]; then
    while IFS= read -r line; do
        # Skip empty lines and comments
        if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
            ignored_scripts+=("$line")
        fi
    done < "$ignore_file"
fi

# Build ordered script list
ordered_scripts=()
for script_name in "${execution_order[@]}"; do
    # Look for script with any numeric prefix or no prefix
    script_path=""
    for candidate in "$script_dir/runs/"*"$script_name"; do
        if [[ -f "$candidate" && -x "$candidate" ]]; then
            script_path="$candidate"
            break
        fi
    done
    
    if [[ -n "$script_path" ]]; then
        ordered_scripts+=("$script_path")
    fi
done

# Add any remaining scripts not in the execution order (for backwards compatibility)
for script in "$script_dir/runs/"*; do
    if [[ -f "$script" && -x "$script" ]]; then
        script_basename=$(basename "$script")
        # Remove numeric prefix for comparison
        clean_name=$(echo "$script_basename" | sed 's/^[0-9]*-//')
        
        # Check if this script is already in our ordered list
        found=false
        for ordered_script in "${ordered_scripts[@]}"; do
            if [[ "$script" == "$ordered_script" ]]; then
                found=true
                break
            fi
        done
        
        # If not found and not in execution order, add it to the end
        if [[ "$found" == false ]]; then
            in_order=false
            for order_name in "${execution_order[@]}"; do
                if [[ "$clean_name" == "$order_name" ]]; then
                    in_order=true
                    break
                fi
            done
            if [[ "$in_order" == false ]]; then
                ordered_scripts+=("$script")
            fi
        fi
    fi
done

script_count=0
executed_count=0

for script in "${ordered_scripts[@]}"; do
    script_name=$(basename "$script")
    script_count=$((script_count + 1))

    if [[ -n "$grep_pattern" ]] && ! echo "$script_name" | grep -q "$grep_pattern"; then
        log "grep \"$grep_pattern\" filtered out $script"
        continue
    fi

    # Check if script is in ignore list
    for ignored in "${ignored_scripts[@]}"; do
        if [[ "$script_name" == "$ignored" ]]; then
            log "ignored script: $script (found in .ignore file)"
            continue 2
        fi
    done

    log "running script: $script"
    executed_count=$((executed_count + 1))

    if [[ $DRY_RUN == "0" ]]; then
        if [[ "$script_name" =~ (git|fonts|packages|hyprland-packages|flatpak|snap) ]]; then
            sudo -v 2>/dev/null || true
        fi

        if "$script"; then
            echo ""
        else
            echo "‚ùå Script $script_name failed"
            exit 1
        fi
    else
        "$script" --dry
        echo ""
    fi
done

if [[ $DRY_RUN == "1" ]]; then
    log "Would execute $executed_count of $script_count scripts"
else
    echo "‚úÖ Executed $executed_count of $script_count scripts successfully"
    echo "üéâ Dotfiles setup complete! You can rerun this anytime to update."
fi
