#!/usr/bin/env bash

# Install system packages (idempotent)
set -e

# Set DOTFILES_DIR if not already set
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
export DOTFILES_DIR="${DOTFILES_DIR:-$script_dir}"

# Source shared utilities
source "$DOTFILES_DIR/lib/utils.sh"

# Parse arguments
parse_args "$@"

log "Installing system packages..."

# Detect package manager and install essential packages
if command_exists pacman; then
    log "→ Detected Arch Linux (pacman)"

    # Essential packages for Arch (official repos)
    # Note: git is handled by the git script (01-git)
    packages=(
        "curl"
        "wget"
        "fish"
        "zsh"
        "tmux"
        "neovim"
        "vim"
        "alacritty"
        "kitty"
        "starship"
        "ripgrep"
        "fzf"
        "fd"
        "bat"
        "exa"
        "zoxide"
        "wezterm"
        "base-devel"        # Needed for paru/AUR
        "flatpak"           # Flatpak package manager
        "docker"            # Docker containers
        "docker-compose"    # Docker compose
        "ansible"           # Automation tool
        "python"            # Python interpreter
        "python-pip"        # Python package manager
        "nodejs"            # Node.js runtime
        "npm"               # Node package manager
        "go"
        "rust"              # Rust programming language
        "jq"                # JSON processor
        "yq"                # YAML processor
        "tree"              # Directory tree viewer
        "htop"              # Process viewer
        "unzip"             # Archive extraction
        "zip"               # Archive creation
        "tar"               # Archive tool
        "gzip"              # Compression
        "rsync"             # File sync
        "openssh"           # SSH client/server
        "man-db"            # Manual pages
        "man-pages"         # Manual pages
        "make"              # Build tool (needed for entr)
        "gcc"               # C compiler (needed for entr)
        "cmake"             # Build system (needed for nvim packages)
        "luarocks"          # Lua package manager (needed for nvim plugins)
        "xorg-xhost"
    )

    # Check which packages need to be installed
    packages_to_install=()
    for package in "${packages[@]}"; do
        if ! is_installed_pacman "$package"; then
            packages_to_install+=("$package")
        else
            log "✓ $package already installed"
        fi
    done

    if [ ${#packages_to_install[@]} -gt 0 ]; then
        log "→ Installing packages: ${packages_to_install[*]}"
        if [[ $DRY_RUN == "0" ]]; then
            sudo pacman -S --needed --noconfirm "${packages_to_install[@]}" || log "⚠ Some packages may have failed to install"
        fi
    else
        log "✓ All official packages already installed"
    fi

    # Enable and start services
    log "→ Enabling package manager services..."
    if [[ $DRY_RUN == "0" ]]; then
        # Enable snapd if installed
        if is_installed_pacman "snapd"; then
            sudo systemctl enable --now snapd.socket 2>/dev/null || log "⚠ Failed to enable snapd"
            sudo systemctl enable --now snapd.apparmor 2>/dev/null || true
            # Create snap symlink if it doesn't exist
            if [[ ! -e /snap ]]; then
                sudo ln -sf /var/lib/snapd/snap /snap 2>/dev/null || true
            fi
        fi

        # Enable docker if installed
        if is_installed_pacman "docker"; then
            log "→ Setting up Docker service..."
            
            # Reload systemd daemon in case unit files changed
            sudo systemctl daemon-reload 2>/dev/null || true
            
            # Check if docker is already enabled and running
            if systemctl is-enabled docker.service >/dev/null 2>&1; then
                log "✓ Docker service already enabled"
            else
                sudo systemctl enable docker 2>/dev/null && log "✓ Docker service enabled" || log "⚠ Failed to enable docker service"
            fi
            
            # Check if docker is running
            if systemctl is-active docker.service >/dev/null 2>&1; then
                log "✓ Docker service is running"
            else
                sudo systemctl start docker 2>/dev/null && log "✓ Docker service started" || log "⚠ Failed to start docker service"
            fi
            
            # Add user to docker group
            if ! groups "$USER" | grep -q docker; then
                sudo usermod -aG docker "$USER" && log "✓ Added $USER to docker group" || log "⚠ Failed to add user to docker group"
                log "→ Note: Log out and back in for docker group membership to take effect"
            else
                log "✓ $USER already in docker group"
            fi
        fi
        
        # Add user to other useful system groups
        log "→ Adding user to system groups..."
        groups_added=()
        useful_groups=("wheel" "audio" "video" "input" "storage" "optical" "network" "power")
        for group in "${useful_groups[@]}"; do
            if getent group "$group" >/dev/null 2>&1 && ! groups "$USER" | grep -q "$group"; then
                if sudo usermod -aG "$group" "$USER"; then
                    log "✓ Added $USER to $group group"
                    groups_added+=("$group")
                fi
            fi
        done
        
        # Reload user groups if any were added
        if [ ${#groups_added[@]} -gt 0 ]; then
            log "→ Reloading user groups in current session..."
            # Use exec to replace the current shell with a new one that has updated groups
            # But first, we need to continue the script execution
            log "→ Groups added: ${groups_added[*]}"
            log "→ Note: Some services may require a full logout/login to work properly"
            
            # Try to refresh the current session's group membership
            # This works for some cases but not all
            for group in "${groups_added[@]}"; do
                if command -v newgrp >/dev/null 2>&1; then
                    log "→ Attempting to activate $group group in current session"
                    # Note: newgrp starts a new shell, so we can't use it directly in a script
                    # Instead, we'll note that a reboot/relogin may be needed
                fi
            done
        fi
    else
        log "Would enable snapd and docker services"
        log "Would add user to docker group"
    fi

    # Install paru (AUR helper) if not already installed
    if ! command_exists paru; then
        log "→ Installing paru (AUR helper)..."
        if [[ $DRY_RUN == "0" ]]; then
            # Clone and build paru
            temp_dir=$(mktemp -d)
            (
                cd "$temp_dir"
                git clone https://aur.archlinux.org/paru.git
                cd paru
                makepkg -si --noconfirm
            ) || log "⚠ Failed to install paru"
            rm -rf "$temp_dir"
        fi
        log "✓ Paru installed"
    else
        log "✓ Paru already installed"
    fi

    # Install fonts first (needed for UI)
    log "→ Installing fonts..."
    font_packages=(
        "ttf-font-awesome"          # FontAwesome 6 (includes Solid, Regular, Brands)
        "ttf-fira-code"            # Fira Code with ligatures
        "ttf-jetbrains-mono"       # JetBrains Mono
        "noto-fonts"               # Google Noto fonts
        "noto-fonts-emoji"         # Emoji support
        "noto-fonts-cjk"           # Chinese, Japanese, Korean
        "ttf-liberation"           # Liberation fonts (Arial/Times alternatives)
        "ttf-dejavu"               # DejaVu fonts
        "ttf-opensans"             # Open Sans
        "ttf-roboto"               # Roboto font family
        "fontconfig"               # Font configuration
    )

    fonts_to_install=()
    for font in "${font_packages[@]}"; do
        if ! is_installed_pacman "$font"; then
            fonts_to_install+=("$font")
        else
            log "✓ $font already installed"
        fi
    done

    if [ ${#fonts_to_install[@]} -gt 0 ]; then
        log "→ Installing fonts: ${fonts_to_install[*]}"
        if [[ $DRY_RUN == "0" ]]; then
            sudo pacman -S --needed --noconfirm "${fonts_to_install[@]}" || log "⚠ Some fonts may have failed to install"
        fi
    else
        log "✓ All fonts already installed"
    fi

    # PRIORITY 2: AUR packages (not available in Flatpak or better suited for AUR)
    aur_packages=(
        # Development Tools
        "lazygit"                    # Git TUI
        "lazydocker"                 # Docker TUI
        "act"                        # GitHub Actions runner
        "deno"                       # Deno runtime (needed for nvim packages)
        
        # System Tools & Utilities
        "1password"                  # Password manager (native integration)
        "1password-cli"              # 1Password CLI
        "yay"                        # Alternative AUR helper
        "snapd"                      # Snap package manager
        "neofetch"                   # System info
        
        # Browsers & Apps (AUR-specific or better performance)
        "zen-browser-bin"            # Zen browser
        "ghostty-git"                # Terminal emulator
        "beekeeper-studio-bin"       # Database client (if not using Flatpak)
        
        # Fonts
        "ttf-meslo-nerd-font-powerlevel10k"
        
        # REMOVED (moved to Flatpak for better sandboxing):
        # - google-chrome → com.google.Chrome
        # - visual-studio-code-bin → com.visualstudio.code  
        # - discord → com.discordapp.Discord
        # - spotify → com.spotify.Client
        # - obsidian → com.obsidian.Obsidian
        # - postman-bin → com.getpostman.Postman
        # - slack-desktop → com.slack.Slack
    )

    # Check which AUR packages need to be installed
    aur_packages_to_install=()
    for package in "${aur_packages[@]}"; do
        if ! is_installed_pacman "$package"; then
            aur_packages_to_install+=("$package")
        else
            log "✓ $package (AUR) already installed"
        fi
    done

    if [ ${#aur_packages_to_install[@]} -gt 0 ]; then
        log "→ Installing AUR packages: ${aur_packages_to_install[*]}"
        if [[ $DRY_RUN == "0" ]]; then
            paru -S --needed --noconfirm "${aur_packages_to_install[@]}" || log "⚠ Some AUR packages may have failed to install"
        fi
    else
        log "✓ All AUR packages already installed"
    fi

    # Install Nerd Fonts from official repository
    install_nerd_fonts

    # Verify FontAwesome installation
    log "→ Verifying FontAwesome installation..."
    if [[ $DRY_RUN == "0" ]]; then
        if fc-list | grep -i "font awesome" &> /dev/null; then
            log "✓ FontAwesome fonts detected:"
            fc-list | grep -i "font awesome" | head -3 | while read -r font; do
                log "  - $(echo "$font" | cut -d: -f2 | xargs)"
            done
        else
            log "⚠ FontAwesome fonts not detected in font cache"
        fi
    fi

    # Build and install entr from submodule
    log "→ Building and installing entr from source..."
    entr_dir="$DOTFILES_DIR/env/.config/entr"
    if [[ -d "$entr_dir" && -f "$entr_dir/entr.c" ]]; then
        if [[ $DRY_RUN == "0" ]]; then
            (
                cd "$entr_dir"
                # Configure and build entr
                if ./configure && make; then
                    # Install entr to /usr/local/bin
                    sudo make install || {
                        log "⚠ Failed to install entr system-wide, installing to ~/.local/bin"
                        mkdir -p "$HOME/.local/bin"
                        cp entr "$HOME/.local/bin/"
                        chmod +x "$HOME/.local/bin/entr"
                    }
                    log "✓ entr installed successfully"
                else
                    log "⚠ Failed to build entr"
                fi
            ) || log "⚠ entr build/install failed"
        else
            log "Would build and install entr from $entr_dir"
        fi
    else
        log "⚠ entr source not found at $entr_dir (run git submodule update first)"
    fi

elif command_exists apt; then
    log "→ Detected Ubuntu/Debian (apt)"

    # Essential packages for Ubuntu/Debian
    # Note: git is handled by the git script (01-git)
    packages=(
        "curl"
        "fish"
        "zsh"
        "tmux"
        "neovim"
        "alacritty"
        "ripgrep"
        "fzf"
        "fd-find"
        "bat"
        "zoxide"
        "yq"                # YAML processor
        "fontconfig"
        "fonts-font-awesome"
        "fonts-firacode"
        "fonts-jetbrains-mono"
        "fonts-noto"
        "fonts-noto-color-emoji"
        "fonts-liberation"
        "fonts-dejavu-core"
        "cmake"             # Build system (needed for nvim packages)
        "luarocks"          # Lua package manager (needed for nvim plugins)
    )

    # Check which packages need to be installed
    packages_to_install=()
    for package in "${packages[@]}"; do
        if ! is_installed_apt "$package"; then
            packages_to_install+=("$package")
        else
            log "✓ $package already installed"
        fi
    done

    if [ ${#packages_to_install[@]} -gt 0 ]; then
        log "→ Updating package list..."
        if [[ $DRY_RUN == "0" ]]; then
            sudo apt update -qq
        fi

        log "→ Installing packages: ${packages_to_install[*]}"
        if [[ $DRY_RUN == "0" ]]; then
            sudo apt install -y "${packages_to_install[@]}" || log "⚠ Some packages may have failed to install"
        fi
    else
        log "✓ All packages already installed"
    fi

    # Install Deno (not available in Ubuntu repos)
    if ! command_exists deno; then
        log "→ Installing Deno runtime..."
        if [[ $DRY_RUN == "0" ]]; then
            curl -fsSL https://deno.land/install.sh | sh 2>/dev/null && {
                # Add to PATH for current session
                export PATH="$HOME/.deno/bin:$PATH"
                log "✓ Deno installed successfully"
            } || log "⚠ Failed to install Deno"
        else
            log "Would install Deno via curl script"
        fi
    else
        log "✓ Deno already installed"
    fi
    
    # Generate Deno completions if Deno is available
    if command_exists deno || [[ -f "$HOME/.deno/bin/deno" ]]; then
        log "→ Setting up Deno completions..."
        if [[ $DRY_RUN == "0" ]]; then
            # Ensure deno is in PATH
            [[ -f "$HOME/.deno/bin/deno" ]] && export PATH="$HOME/.deno/bin:$PATH"
            
            # Create completions directory
            mkdir -p "$HOME/.local/share/bash-completion/completions"
            
            # Generate bash completions
            if deno completions bash > "$HOME/.local/share/bash-completion/completions/deno.bash" 2>/dev/null; then
                log "✓ Deno bash completions generated"
            else
                log "⚠ Failed to generate Deno bash completions"
            fi
            
            # Generate zsh completions
            mkdir -p "$HOME/.local/share/zsh/site-functions"
            if deno completions zsh > "$HOME/.local/share/zsh/site-functions/_deno" 2>/dev/null; then
                log "✓ Deno zsh completions generated"
            else
                log "⚠ Failed to generate Deno zsh completions"
            fi
            
            # Generate fish completions
            if command_exists fish; then
                mkdir -p "$HOME/.config/fish/completions"
                if deno completions fish > "$HOME/.config/fish/completions/deno.fish" 2>/dev/null; then
                    log "✓ Deno fish completions generated"
                else
                    log "⚠ Failed to generate Deno fish completions"
                fi
            fi
        else
            log "Would generate Deno completions for bash, zsh, and fish"
        fi
    fi

    # Refresh font cache for Ubuntu/Debian
    log "→ Refreshing font cache..."
    if [[ $DRY_RUN == "0" ]]; then
        fc-cache -fv &> /dev/null || log "⚠ Failed to refresh font cache"
    fi
    log "✓ Font cache refreshed"

else
    log "⚠ Unknown package manager. Please install packages manually:"
    log "  - git, curl, fish, zsh, tmux, neovim, alacritty, starship, ripgrep, fzf, fd, bat, exa, zoxide"
fi

# Setup Rust/Cargo environment
if command_exists rustc || is_installed_pacman "rust"; then
    log "→ Setting up Rust/Cargo environment..."
    if [[ $DRY_RUN == "0" ]]; then
        # Create cargo env file if it doesn't exist
        if [[ ! -f "$HOME/.cargo/env" ]]; then
            mkdir -p "$HOME/.cargo"
            cat > "$HOME/.cargo/env" << 'EOF'
# Cargo environment setup
export PATH="$HOME/.cargo/bin:$PATH"
EOF
            log "✓ Created Cargo environment file"
        else
            log "✓ Cargo environment file already exists"
        fi
        
        # Add cargo bin to current PATH if not already there
        if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
            export PATH="$HOME/.cargo/bin:$PATH"
            log "✓ Added Cargo bin to current PATH"
        fi
    else
        log "Would create Cargo environment file"
    fi
else
    log "→ Rust not installed, skipping Cargo setup"
fi

# Try to reload user session to pick up group changes
if [[ $DRY_RUN == "0" ]]; then
    log "→ Attempting to reload user session for group changes..."
    
    # Method 1: Restart systemd user session
    systemctl --user daemon-reexec 2>/dev/null || true
    systemctl --user daemon-reload 2>/dev/null || true
    
    # Method 2: For Flatpak issues, restart flatpak system helper
    if systemctl is-active --quiet flatpak-system-helper 2>/dev/null; then
        log "→ Restarting flatpak-system-helper service..."
        sudo systemctl restart flatpak-system-helper 2>/dev/null || true
    fi
    
    log "→ Session reload attempted. Some changes may require logout/login."
else
    log "Would attempt to reload user session"
fi

log "✓ Package installation complete"
