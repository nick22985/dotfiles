#!/usr/bin/env bash

# Install system packages (idempotent)

# Set DOTFILES_DIR if not already set
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
export DOTFILES_DIR="${DOTFILES_DIR:-$script_dir}"

# Source shared utilities
source "$DOTFILES_DIR/lib/utils.sh"

# Parse arguments
parse_args "$@"

log "Installing system packages..."

# Set context for error tracking
set_context "System Packages"

# Detect package manager and install essential packages
if command_exists pacman; then
    log_info "Detected Arch Linux (pacman)"

    # Essential packages for Arch (official repos)
    # Note: git is handled by the git script (01-git)
    packages=(
        "curl"
        "wget"
        "fish"
        "zsh"
        "tmux"
        "neovim"
        "vim"
        "alacritty"
        "kitty"
        "starship"
        "ripgrep"
        "fzf"
        "fd"
        "bat"
        "exa"
        "zoxide"
        "wezterm"
        "base-devel"        # Needed for paru/AUR
        "flatpak"           # Flatpak package manager
        "docker"            # Docker containers
        "docker-compose"    # Docker compose
        "ansible"           # Automation tool
        "python"            # Python interpreter
        "python-pip"        # Python package manager
        "nodejs"            # Node.js runtime
        "npm"               # Node package manager
        "go"
        "rust"              # Rust programming language
        "jq"                # JSON processor
        "yq"                # YAML processor
        "tree"              # Directory tree viewer
        "htop"              # Process viewer
        "unzip"             # Archive extraction
        "zip"               # Archive creation
        "tar"               # Archive tool
        "gzip"              # Compression
        "rsync"             # File sync
        "openssh"           # SSH client/server
        "man-db"            # Manual pages
        "man-pages"         # Manual pages
        "make"              # Build tool (needed for entr)
        "gcc"               # C compiler (needed for entr)
        "cmake"             # Build system (needed for nvim packages)
        "luarocks"          # Lua package manager (needed for nvim plugins)
				"imagemagick"
				"ghostty"                # Terminal emulator
				"timeshift-autosnap"
				"bluez"
				"bluez-utils"
				"steam-native-runtime"
				"kwallet"
				"kwalletmanager"
				"kwallet-pam"
				"dolphin"
				# open default files for dolphin
				"archlinux-xdg-menu"
				"networkmanager-openvpn"
				"vlc"
				"vlc-plugins-all"
				"ffmpeg"
				"libva" 
				"libva-utils"
				"gst-plugins-base"
				"gst-plugins-good"
				# "lutris"
				"ntfs-3g" # ntfs support hdd
    )

    install_packages_pacman "${packages[@]}"
    # Enable and start services
    log_info "Setting up package manager services..."
    setup_package_services

    # Add user to useful system groups
    useful_groups=("wheel" "audio" "video" "input" "storage" "disk" "optical" "network" "power" "libvirt" "docker" "lp")
    add_user_to_groups "${useful_groups[@]}"

    # Install paru (AUR helper) if not already installed
    install_paru



    # PRIORITY 2: AUR packages (not available in Flatpak or better suited for AUR)
    aur_packages=(
        # Development Tools
        "lazygit"                    # Git TUI
        "lazydocker"                 # Docker TUI
        "act"                        # GitHub Actions runner

        # System Tools & Utilities
        "1password"                  # Password manager (native integration)
        "1password-cli"              # 1Password CLI
        "yay"                        # Alternative AUR helper
        "snapd"                      # Snap package manager
        "neofetch"                   # System info
				"infisical-bin"
				"mongodb-compass"
				"brave-bin"
				"rofi-bluetooth-git"
    )

    install_packages_aur "${aur_packages[@]}"



    # Build and install entr from submodule
    log "→ Building and installing entr from source..."
    entr_dir="$DOTFILES_DIR/env/.config/entr"
    if [[ -d "$entr_dir" && -f "$entr_dir/entr.c" ]]; then
        if [[ $DRY_RUN == "0" ]]; then
            (
                cd "$entr_dir"
                # Configure and build entr
                if ./configure && make; then
                    # Install entr to /usr/local/bin
                    sudo make install || {
                        log "⚠ Failed to install entr system-wide, installing to ~/.local/bin"
                        mkdir -p "$HOME/.local/bin"
                        cp entr "$HOME/.local/bin/"
                        chmod +x "$HOME/.local/bin/entr"
                    }
                    log "✓ entr installed successfully"
                else
                    log "⚠ Failed to build entr"
                fi
            ) || log "⚠ entr build/install failed"
        else
            log "Would build and install entr from $entr_dir"
        fi
    else
        log "⚠ entr source not found at $entr_dir (run git submodule update first)"
    fi

elif command_exists apt; then
    log_info "Detected Ubuntu/Debian (apt)"

    # Essential packages for Ubuntu/Debian
    # Note: git is handled by the git script (01-git)
    packages=(
        "curl"
        "fish"
        "zsh"
        "tmux"
        "neovim"
        "alacritty"
        "ripgrep"
        "fzf"
        "fd-find"
        "bat"
        "zoxide"
        "yq"                # YAML processor

        "cmake"             # Build system (needed for nvim packages)
        "luarocks"          # Lua package manager (needed for nvim plugins)
    )

    install_packages_apt "${packages[@]}"

    # Install Deno (not available in Ubuntu repos)
    if ! command_exists deno; then
        log "→ Installing Deno runtime..."
        if [[ $DRY_RUN == "0" ]]; then
            curl -fsSL https://deno.land/install.sh | DENO_INSTALL="$HOME/.deno" sh -s -- -y 2>/dev/null && {
                # Add to PATH for current session
                export PATH="$HOME/.deno/bin:$PATH"
                log "✓ Deno installed successfully"
            } || log "⚠ Failed to install Deno"
        else
            log "Would install Deno via curl script"
        fi
    else
        log "✓ Deno already installed"
    fi

    # Generate Deno completions if Deno is available
    if command_exists deno || [[ -f "$HOME/.deno/bin/deno" ]]; then
        log "→ Setting up Deno completions..."
        if [[ $DRY_RUN == "0" ]]; then
            # Ensure deno is in PATH
            [[ -f "$HOME/.deno/bin/deno" ]] && export PATH="$HOME/.deno/bin:$PATH"

            # Create completions directory
            mkdir -p "$HOME/.local/share/bash-completion/completions"

            # Generate bash completions
            if deno completions bash > "$HOME/.local/share/bash-completion/completions/deno.bash" 2>/dev/null; then
                log "✓ Deno bash completions generated"
            else
                log "⚠ Failed to generate Deno bash completions"
            fi

            # Generate zsh completions
            mkdir -p "$HOME/.local/share/zsh/site-functions"
            if deno completions zsh > "$HOME/.local/share/zsh/site-functions/_deno" 2>/dev/null; then
                log "✓ Deno zsh completions generated"
            else
                log "⚠ Failed to generate Deno zsh completions"
            fi

            # Generate fish completions
            if command_exists fish; then
                mkdir -p "$HOME/.config/fish/completions"
                if deno completions fish > "$HOME/.config/fish/completions/deno.fish" 2>/dev/null; then
                    log "✓ Deno fish completions generated"
                else
                    log "⚠ Failed to generate Deno fish completions"
                fi
            fi
        else
            log "Would generate Deno completions for bash, zsh, and fish"
        fi
    fi



else
    log_error "Unknown package manager. Please install packages manually:"
    log "  - git, curl, fish, zsh, tmux, neovim, alacritty, starship, ripgrep, fzf, fd, bat, exa, zoxide"
fi

# Setup Rust/Cargo environment
if command_exists rustc || is_installed_pacman "rust"; then
    log "→ Setting up Rust/Cargo environment..."
    if [[ $DRY_RUN == "0" ]]; then
        # Create cargo env file if it doesn't exist
        if [[ ! -f "$HOME/.cargo/env" ]]; then
            mkdir -p "$HOME/.cargo"
            cat > "$HOME/.cargo/env" << 'EOF'
# Cargo environment setup
export PATH="$HOME/.cargo/bin:$PATH"
EOF
            log "✓ Created Cargo environment file"
        else
            log "✓ Cargo environment file already exists"
        fi

        # Add cargo bin to current PATH if not already there
        if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
            export PATH="$HOME/.cargo/bin:$PATH"
            log "✓ Added Cargo bin to current PATH"
        fi
    else
        log "Would create Cargo environment file"
    fi
else
    log "→ Rust not installed, skipping Cargo setup"
fi

# Try to reload user session to pick up group changes
if [[ $DRY_RUN == "0" ]]; then
    log "→ Attempting to reload user session for group changes..."

    # Method 1: Restart systemd user session
    systemctl --user daemon-reexec 2>/dev/null || true
    systemctl --user daemon-reload 2>/dev/null || true

    # Method 2: For Flatpak issues, restart flatpak system helper
    if systemctl is-active --quiet flatpak-system-helper 2>/dev/null; then
        log "→ Restarting flatpak-system-helper service..."
        sudo systemctl restart flatpak-system-helper 2>/dev/null || true
    fi

    log "→ Session reload attempted. Some changes may require logout/login."
else
    log "Would attempt to reload user session"
fi

log_success "Package installation complete"
