#!/usr/bin/env bash

# Clone GitHub repositories from private repos list (idempotent - skips existing)
set -e

# Set DOTFILES_DIR if not already set
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
export DOTFILES_DIR="${DOTFILES_DIR:-$script_dir}"

# Source shared utilities
source "$DOTFILES_DIR/lib/utils.sh"

# Parse arguments
parse_args "$@"

# Configuration
PRIVATE_DIR="$DOTFILES_DIR/env/.config/.nickInstall/install/configs/private"
REPOS_FILE="$PRIVATE_DIR/repos.txt"
DEFAULT_CLONE_DIR="$HOME/repos"

# Allow override of clone directory
CLONE_DIR="${REPOS_CLONE_DIR:-$DEFAULT_CLONE_DIR}"

log "Syncing GitHub repositories..."

# Check if private directory exists
if [[ ! -d "$PRIVATE_DIR" ]]; then
    log "⚠ Private directory not found: $PRIVATE_DIR"
    log "→ Make sure the private submodule is initialized"
    return 0
fi

# Check if repos file exists
if [[ ! -f "$REPOS_FILE" ]]; then
    log "⚠ Repos file not found: $REPOS_FILE"
    log "→ Creating example repos.txt file..."

    if [[ $DRY_RUN == "0" ]]; then
        cat > "$REPOS_FILE" << 'EOF'
# GitHub repositories to sync
# Format: owner/repo [target_directory]
# Lines starting with # are ignored
#
# Note: Repositories are cloned using SSH by default (git@github.com:owner/repo.git)
# Make sure your SSH key is configured for GitHub, or use --https flag
# Submodules are automatically initialized and updated for all repositories
#
# Target directory options:
# 1. No directory specified: uses ~/repos/repo-name
# 2. Relative path: relative to ~/repos/ (e.g., "work/project" -> ~/repos/work/project)
# 3. Absolute path: exact path (e.g., "/opt/tools/repo")
# 4. Home relative: starts with ~/ (e.g., "~/projects/work/repo")
# 5. Environment variable: starts with $ (e.g., "$WORKSPACE/repo")
#
# Examples:
# nick22985/my-private-repo                           # -> ~/repos/my-private-repo
# nick22985/another-repo custom-name                  # -> ~/repos/custom-name
# organization/project work/project                   # -> ~/repos/work/project
# company/work-tool ~/projects/work/tool              # -> ~/projects/work/tool
# personal/side-project ~/projects/personal/project   # -> ~/projects/personal/project
# system/admin-tool /opt/admin-tools/tool             # -> /opt/admin-tools/tool
# dev/workspace-tool $WORKSPACE/tools/repo            # -> $WORKSPACE/tools/repo

# Add your repositories below:
# nick22985/private-repo1                             # -> ~/repos/private-repo1
# nick22985/work-project ~/projects/work/project      # -> ~/projects/work/project
# nick22985/personal-project ~/projects/personal/project # -> ~/projects/personal/project
# company/internal-tool ~/projects/work/internal-tool # -> ~/projects/work/internal-tool
# system/admin-scripts /opt/scripts/admin             # -> /opt/scripts/admin
# dev/workspace-tool $WORKSPACE/tools/repo            # -> $WORKSPACE/tools/repo (if WORKSPACE is set)

EOF
        log "✓ Created example repos.txt at $REPOS_FILE"
        log "→ Edit this file to add your repositories"
    else
        log "Would create example repos.txt file"
    fi
    return 0
fi

# Create clone directory if it doesn't exist
if [[ ! -d "$CLONE_DIR" ]]; then
    log "→ Creating clone directory: $CLONE_DIR"
    if [[ $DRY_RUN == "0" ]]; then
        mkdir -p "$CLONE_DIR"
    fi
fi

log "→ Reading repositories from: $REPOS_FILE"
log "→ Clone directory: $CLONE_DIR"

# Process repos file
repo_count=0
success_count=0
skip_count=0

while IFS= read -r line || [[ -n "$line" ]]; do
    # Skip empty lines and comments
    if [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]; then
        continue
    fi

    # Parse line: "owner/repo [target_dir]"
    read -r repo_spec target_dir <<< "$line"

    if [[ -z "$repo_spec" ]]; then
        continue
    fi

    repo_count=$((repo_count + 1))

    # Check if repo_spec is a full Git URL or owner/repo format
    if [[ "$repo_spec" =~ ^(git@|https?://) ]]; then
        # Full Git URL provided
        git_url="$repo_spec"
        # Extract repo name from URL for directory naming
        if [[ "$repo_spec" =~ /([^/]+)\.git$ ]]; then
            clean_repo_name="${BASH_REMATCH[1]}"
        elif [[ "$repo_spec" =~ /([^/]+)/?$ ]]; then
            clean_repo_name="${BASH_REMATCH[1]}"
        else
            log "⚠ Could not extract repo name from URL: $repo_spec"
            continue
        fi
        log "  → Using provided Git URL: $git_url"
    elif [[ "$repo_spec" =~ ^[^/]+/[^/]+$ ]]; then
        # owner/repo format - construct SSH URL
        owner=$(echo "$repo_spec" | cut -d'/' -f1)
        repo_name=$(echo "$repo_spec" | cut -d'/' -f2)
        clean_repo_name="${repo_name%.git}"
        git_url="git@github.com:$repo_spec.git"
        log "  → Constructed SSH URL: $git_url"
    else
        log "⚠ Invalid repo format: $repo_spec (expected: owner/repo or full Git URL)"
        continue
    fi
    log "→ Processing: $repo_spec"

    # Determine target directory
    if [[ -n "$target_dir" ]]; then
        # Check if target_dir is an absolute path or starts with ~/
        if [[ "$target_dir" =~ ^/ ]]; then
            # Absolute path
            full_path="$target_dir"
            log "  → Using absolute path: $full_path"
        elif [[ "$target_dir" =~ ^~/ ]]; then
            # Home directory path
            full_path="${target_dir/#\~/$HOME}"
            log "  → Using home relative path: $full_path"
        elif [[ "$target_dir" =~ ^\$ ]]; then
            # Environment variable path
            full_path=$(eval echo "$target_dir")
            log "  → Using environment variable path: $full_path"
        else
            # Relative to clone directory
            full_path="$CLONE_DIR/$target_dir"
            log "  → Using relative path: $full_path"
        fi
    else
        full_path="$CLONE_DIR/$clean_repo_name"
        log "  → Using default path: $full_path"
    fi

    if [[ -d "$full_path/.git" ]]; then
        # Repository exists, skip it
        log "  ✓ Repository already exists, skipping"
        skip_count=$((skip_count + 1))
    else
        # Repository doesn't exist, clone it
        log "  → Cloning repository..."

        if [[ $DRY_RUN == "0" ]]; then
            # Create parent directory if needed
            parent_dir=$(dirname "$full_path")
            mkdir -p "$parent_dir"

            # Use the provided or constructed Git URL
            log "  → Cloning repository: $git_url"
            if git clone "$git_url" "$full_path" 2>/dev/null; then
                if [[ "$git_url" =~ ^git@ ]]; then
                    log "  ✓ Cloned $repo_spec (SSH)"
                else
                    log "  ✓ Cloned $repo_spec (HTTPS)"
                fi

                # Initialize and update submodules if they exist
                (
                    cd "$full_path"
                    if [[ -f .gitmodules ]]; then
                        log "  → Initializing submodules..."
                        if git submodule update --init --recursive 2>/dev/null; then
                            log "  ✓ Submodules initialized and updated"
                        else
                            log "  ⚠ Failed to initialize submodules"
                        fi
                    fi
                )

                success_count=$((success_count + 1))
            else
                if [[ "$git_url" =~ ^git@ ]]; then
                    log "  ⚠ Failed to clone $repo_spec via SSH"
                    log "  → Make sure your SSH key is configured for GitHub"
                else
                    log "  ⚠ Failed to clone $repo_spec via HTTPS"
                    log "  → Check your credentials and network connection"
                fi
                # Clean up failed clone attempt
                [[ -d "$full_path" ]] && rm -rf "$full_path"
            fi
        else
            if [[ "$git_url" =~ ^git@ ]]; then
                log "  Would clone $repo_spec to $full_path (via SSH)"
            else
                log "  Would clone $repo_spec to $full_path (via HTTPS)"
            fi
            log "  Would initialize submodules if present"
            success_count=$((success_count + 1))
        fi
    fi

done < "$REPOS_FILE"

# Summary
if [[ $DRY_RUN == "0" ]]; then
    log "✓ Repository sync complete"
    log "  → Processed: $repo_count repositories"
    log "  → Cloned: $success_count"
    if [[ $skip_count -gt 0 ]]; then
        log "  → Skipped (already exist): $skip_count"
    fi
    if [[ $((repo_count - success_count - skip_count)) -gt 0 ]]; then
        log "  → Failed: $((repo_count - success_count - skip_count))"
    fi
else
    log "Would process $repo_count repositories (clone new, skip existing)"
fi
