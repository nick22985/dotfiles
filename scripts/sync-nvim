#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"
LOCAL_NVIM="$HOME/.config/nvim"
DOTFILES_NVIM="$DOTFILES_DIR/env/.config/nvim"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if local nvim config exists
if [[ ! -d "$LOCAL_NVIM" ]]; then
    log_error "Local nvim config not found at $LOCAL_NVIM"
    exit 1
fi

# Check if dotfiles nvim config exists
if [[ ! -d "$DOTFILES_NVIM" ]]; then
    log_error "Dotfiles nvim config not found at $DOTFILES_NVIM"
    exit 1
fi

log_info "Syncing nvim config from $LOCAL_NVIM to $DOTFILES_NVIM"

# Create backup of current dotfiles nvim config
BACKUP_DIR="$DOTFILES_DIR/.backup/nvim-$(date +%Y%m%d-%H%M%S)"
log_info "Creating backup at $BACKUP_DIR"
mkdir -p "$(dirname "$BACKUP_DIR")"
cp -r "$DOTFILES_NVIM" "$BACKUP_DIR"

# Sync the configs - using rsync to preserve structure and handle deletions
log_info "Syncing configuration files..."
rsync -av --delete \
    --exclude='.git/' \
    --exclude='lazy-lock.json' \
    "$LOCAL_NVIM/" "$DOTFILES_NVIM/"

# Handle lazy-lock.json separately (ask user if they want to sync it)
if [[ -f "$LOCAL_NVIM/lazy-lock.json" ]]; then
    if [[ -f "$DOTFILES_NVIM/lazy-lock.json" ]]; then
        # Compare the files
        if ! cmp -s "$LOCAL_NVIM/lazy-lock.json" "$DOTFILES_NVIM/lazy-lock.json"; then
            log_warn "lazy-lock.json files differ"
            echo "Local:     $(stat -c %Y "$LOCAL_NVIM/lazy-lock.json" | xargs -I{} date -d @{} '+%Y-%m-%d %H:%M:%S')"
            echo "Dotfiles:  $(stat -c %Y "$DOTFILES_NVIM/lazy-lock.json" | xargs -I{} date -d @{} '+%Y-%m-%d %H:%M:%S')"
            
            read -p "Update lazy-lock.json in dotfiles? [y/N]: " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                cp "$LOCAL_NVIM/lazy-lock.json" "$DOTFILES_NVIM/lazy-lock.json"
                log_info "Updated lazy-lock.json"
            fi
        else
            log_info "lazy-lock.json files are identical"
        fi
    else
        cp "$LOCAL_NVIM/lazy-lock.json" "$DOTFILES_NVIM/lazy-lock.json"
        log_info "Copied lazy-lock.json to dotfiles"
    fi
fi

# Show git status for the nvim submodule
cd "$DOTFILES_NVIM"
if git status --porcelain | grep -q .; then
    log_info "Changes detected in nvim config:"
    git status
    
    echo
    read -p "Review changes with git diff? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Show both staged and unstaged changes
        if git diff --staged --quiet && git diff --quiet; then
            log_info "No differences to show"
        else
            if ! git diff --staged --quiet; then
                log_info "Staged changes:"
                git diff --staged
            fi
            if ! git diff --quiet; then
                log_info "Unstaged changes:"
                git diff
            fi
        fi
    fi
    
    echo
    read -p "Commit changes to nvim submodule? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Enter commit message: " commit_msg
        git add .
        git commit -m "$commit_msg"
        log_info "Changes committed to nvim submodule"
        
        # Push changes to remote
        echo
        read -p "Push changes to remote? [y/N]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git push
            log_info "Changes pushed to remote"
        fi
        
        # Update the parent dotfiles repo to point to new commit
        cd "$DOTFILES_DIR"
        git add env/.config/nvim
        log_info "Updated submodule reference in parent repo"
        
        echo
        read -p "Commit submodule update in parent repo? [y/N]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git commit -m "Update nvim submodule"
            log_info "Submodule update committed in parent repo"
            
            echo
            read -p "Push parent repo changes? [y/N]: " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git push
                log_info "Parent repo changes pushed"
            fi
        else
            log_info "Don't forget to commit the submodule update in the parent repo"
        fi
    fi
else
    log_info "No changes detected in nvim config"
fi

log_info "Sync completed successfully!"
log_info "Backup available at: $BACKUP_DIR"