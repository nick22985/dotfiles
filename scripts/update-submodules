#!/usr/bin/env bash

# Update all submodules to latest commit on their respective branches
set -e

# Set DOTFILES_DIR if not already set
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
export DOTFILES_DIR="${DOTFILES_DIR:-$script_dir}"

# Source shared utilities
source "$DOTFILES_DIR/lib/utils.sh"

# Parse arguments
parse_args "$@"

log "Updating all submodules to latest commits..."

cd "$DOTFILES_DIR"

# Check if we have any submodules
if [[ ! -f .gitmodules ]]; then
    log "⚠ No .gitmodules file found"
    exit 0
fi

# Get list of submodules
submodules=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')

if [[ -z "$submodules" ]]; then
    log "⚠ No submodules found"
    exit 0
fi

log "Found submodules:"
echo "$submodules" | while read -r submodule; do
    log "  → $submodule"
done

# Update each submodule
updated_count=0
total_count=0

echo "$submodules" | while read -r submodule_path; do
    total_count=$((total_count + 1))

    if [[ ! -d "$submodule_path" ]]; then
        log "⚠ Submodule directory not found: $submodule_path"
        continue
    fi

    log "→ Updating submodule: $submodule_path"

    if [[ $DRY_RUN == "0" ]]; then
        # Get the configured branch for this submodule (if any)
        submodule_name=$(git config --file .gitmodules --get-regexp "submodule\..*\.path" | grep "$submodule_path" | sed 's/submodule\.\(.*\)\.path.*/\1/')
        branch=$(git config --file .gitmodules --get "submodule.$submodule_name.branch" 2>/dev/null || echo "")

        # Change to submodule directory
        (
            cd "$submodule_path"

            # Get current commit before update
            old_commit=$(git rev-parse HEAD 2>/dev/null || echo "unknown")

            # Fetch latest changes
            git fetch origin 2>/dev/null || {
                log "⚠ Failed to fetch from origin for $submodule_path"
                exit 1
            }

            # Determine which branch/ref to update to
            if [[ -n "$branch" ]]; then
                # Use specified branch
                target_ref="origin/$branch"
                log "  → Using configured branch: $branch"
            else
                # Use default branch (usually main/master)
                default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")
                target_ref="origin/$default_branch"
                log "  → Using default branch: $default_branch"
            fi

            # Update to latest commit
            if git checkout -q "$target_ref" 2>/dev/null; then
                new_commit=$(git rev-parse HEAD)

                if [[ "$old_commit" != "$new_commit" ]]; then
                    log "  ✓ Updated from $old_commit to $new_commit"
                    updated_count=$((updated_count + 1))
                else
                    log "  ✓ Already up to date ($new_commit)"
                fi
            else
                log "  ⚠ Failed to checkout $target_ref"
                exit 1
            fi
        ) || {
            log "⚠ Failed to update submodule: $submodule_path"
            continue
        }
    else
        log "  Would update submodule: $submodule_path"
    fi
done

# Update the main repository's submodule references
if [[ $DRY_RUN == "0" ]]; then
    log "→ Updating submodule references in main repository..."

    # Add all submodule changes
    git add . 2>/dev/null || true

    # Check if there are any changes to commit
    if git diff --cached --quiet; then
        log "✓ No submodule reference updates needed"
    else
        log "→ Committing submodule reference updates..."
        git commit -m "Update submodules to latest commits" || {
            log "⚠ Failed to commit submodule updates"
        }
        log "✓ Submodule references updated and committed"
    fi
else
    log "Would update submodule references in main repository"
fi

if [[ $DRY_RUN == "0" ]]; then
    log "✓ Submodule update complete"
else
    log "Would update all submodules to latest commits"
fi
